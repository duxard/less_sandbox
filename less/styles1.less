/*! Interpolation #2 */
@russia-city-odintsovo: Odincovo;
@english-city-odintsovo: 'Odintsovo';
@russia-hello: "Привет, @{russia-city-odintsovo}!";
@english-hello: "Hello, @{english-city-odintsovo}!";

.hello-russia {
  content: @russia-hello;
}
.hello-english {
  content: @english-hello;
}

/*! Playing around #2 */
.a {
  .b {
    .c {
      & ~ & {
        color: red;
      }
    }
  }
}

/*! Interpolation #2 */
@icon-font-name: fontawesome-webfont;
@icon-font-path:  "../fonts";


@font-face {
  font-family: 'FontAwesome';
  src: url('@{icon-font-path}/@{icon-font-name}.eot?v=4.3.0');
  src: url('@{icon-font-path}/@{icon-font-name}.eot?#iefix&v=4.3.0') format('embedded-opentype')
}

/*! Interpolation #3 */
@lang-prefix: site;
@lang-russia: rus;
@lang-english: eng;

.@{lang-prefix}-@{lang-russia} {
    content: "@{lang-russia}";
}

.@{lang-prefix}-@{lang-english} {
    content: "@{lang-english}";
}

/*! Interpolation #4 */
@margin-small: 40px;
@padding-small: 20px;

@size: small;

.block {
  @margin: "margin-@{size}";
  @padding: "padding-@{size}";
  margin: @@margin + @@padding;
}
/*! Interpolation #5 */
/*! При вызове переменной с помощью конструкции @@ на её место подставляется значение переменной, имя которой указано в строке. */

@col: red;
.box {
  @personal-col: "col";
  color: @@personal-col;
}
/*! ------------------------------------------------------------------ */
/*! Mixins 1 */

.bordered(@_cl) {
  border-top: dotted 1px @_cl;
  border-bottom: solid 2px @_cl;
}
.article {
  .bordered(#333);
  color: #443d3d;
}

/*! Mixins 2 */
.clearfix() {
  &:before,
  &:after {
    display: table;
    content: "";
  }

  &:after {
    clear: both;
  }
}

.navbar {
  .clearfix();
}

/*! Mixins 3 - params by def */

.mix(@_col: #aaa) {
  border-top: dotted 1px @_col;
  border-bottom: solid 2px @_col;
}

.footer {
  .mix();
}

/*! Mixins 4 - params by def 2 */
.transition(@function: ease, @duration: .3s, @property: all) {
  transition-timing-function: @function;
  transition-duration: @duration;
  transition-property: @property;
}

.block {
  .transition(linear);
}

.link {
  .transition(linear, .5s);
}
/*! ------------------------------------------------------------------ */
/*! @arguments */

.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #333) {
  -webkit-box-shadow: @arguments;
     -moz-box-shadow: @arguments;
          box-shadow: @arguments;
}

.big-block {
  .box-shadow(2px, 5px);
}

/*! @rest */

.mixin(@width: 152px, @height: 20px, @rest...)  {
  width: @width;
  height: @height;
  border: @rest;
}

.asta {
  .mixin(304px, 40px, 2px, solid, #ddd);
}

/*! ------------------------------------------------------------------ */
/*! Convert pixels to em */

.pxToEm(@value, @base: 16px) {
  @calcEm: (@value / @base) + 0em;
}

.class1 {
  .pxToEm(20px);
  content: @calcEm;
}

/*! ------------------------------------------------------------------ */
/*! !important keyword - adding one to all props of a mixin */

.mixin2(@color: #333, @bg: #f5f5f5) {
  color: @color;

  .nested {
    background-color: @bg;
  }
}

.class2 {
  .mixin2() !important;
}


/*! ------------------------------------------------------------------ */
/*! Не используйте переменные с набором правил как примеси.
Основная задача переменных с набором правил — передача свойств в примеси. Старайтесь использовать эту возможность именно так, и никак иначе. */
/*! Rules set */

/*! #1 example (dummy) */
@element: {
  color: #777;

  &.active {
    color: #000;
  }
};

.item {
  @element();
}

/*! #2 real example  */
.screen(@min, @max, @ruleset) {
  @media (min-width: @min) and (max-width: (@max - 1)) {
    @ruleset();
  }
}

.class3 {
  background-color: #000;

  .screen(768px, 1200px, {
    background-color: #fff;
  });
}
